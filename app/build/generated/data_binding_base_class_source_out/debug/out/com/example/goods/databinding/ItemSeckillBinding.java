// Generated by view binder compiler. Do not edit!
package com.example.goods.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.example.goods.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemSeckillBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView itemSeckillCountdownTv;

  @NonNull
  public final TextView itemSeckillStopTv;

  @NonNull
  public final TextView itemSeckillTheNext;

  @NonNull
  public final RecyclerView itemseckillRv;

  @NonNull
  public final TextView seckillBrick;

  private ItemSeckillBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView itemSeckillCountdownTv, @NonNull TextView itemSeckillStopTv,
      @NonNull TextView itemSeckillTheNext, @NonNull RecyclerView itemseckillRv,
      @NonNull TextView seckillBrick) {
    this.rootView = rootView;
    this.itemSeckillCountdownTv = itemSeckillCountdownTv;
    this.itemSeckillStopTv = itemSeckillStopTv;
    this.itemSeckillTheNext = itemSeckillTheNext;
    this.itemseckillRv = itemseckillRv;
    this.seckillBrick = seckillBrick;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemSeckillBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemSeckillBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_seckill, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemSeckillBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.item_seckill_countdown_tv;
      TextView itemSeckillCountdownTv = rootView.findViewById(id);
      if (itemSeckillCountdownTv == null) {
        break missingId;
      }

      id = R.id.item_seckill_stop_tv;
      TextView itemSeckillStopTv = rootView.findViewById(id);
      if (itemSeckillStopTv == null) {
        break missingId;
      }

      id = R.id.item_seckill_the_next;
      TextView itemSeckillTheNext = rootView.findViewById(id);
      if (itemSeckillTheNext == null) {
        break missingId;
      }

      id = R.id.itemseckill_rv;
      RecyclerView itemseckillRv = rootView.findViewById(id);
      if (itemseckillRv == null) {
        break missingId;
      }

      id = R.id.seckill_brick;
      TextView seckillBrick = rootView.findViewById(id);
      if (seckillBrick == null) {
        break missingId;
      }

      return new ItemSeckillBinding((ConstraintLayout) rootView, itemSeckillCountdownTv,
          itemSeckillStopTv, itemSeckillTheNext, itemseckillRv, seckillBrick);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
